spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos+u-(max_len + 1) - 1,
substr(dnaseq, u, d-1-l), substr(dnaseq, u, d-1),
sep = ":")
return(c(speedy, spdi))
}
}
RefSeq_start <- rep("NC_0000", 23)
RefSeq_mid <- c(paste0("0", as.character(1:9)),
as.character(10:23))
RefSeq_end <- as.character(c(11, 12, 12, 12, 10, 12, 14, 11, 12, 11,
10, 12, 11, 9, 10, 10, 11, 10, 10, 11, 9, 11, 11))
RefSeq <- paste0(RefSeq_start, RefSeq_mid, ".", RefSeq_end)
RefSeq_map <- data.frame(chr = paste0("chr", c(1:22, "X")),
NC = RefSeq)
# Loop through variants in list
# This should be improved to avoid looping
# Current rate is ~ 40k variants / min.
n <- length(X.seq)
res <- matrix(rep(NA, n*2), nrow = n)
dim(var)
dim(ss4)
var = df2[,1:4]
colnames(var) = c("seqnames","hg38_pos","ref","alt")
var$chr = paste0("chr",var$seqnames)
var$ref_len <- nchar(var$ref) # Add length of ref in bp
var$alt_len <- nchar(var$alt) # Add length of alt in bp
var$indel_len <- var$ref_len - var$alt_len
# Get reference sequences around variants
X <- var %>%
mutate(start = hg38_pos - max_len, end = hg38_pos + max_len)
X.gr <- makeGRangesFromDataFrame(X,
seqnames.field = "seqnames",
start.field = "start",
end.field = "end")
X.seq <- getSeq(Hsapiens, X.gr)
# Function to identify insertion sequence
# in atypical ref/alt vcf format cases
get_indel = function(a, b) {
a_len = nchar(a)
b_len = nchar(b)
if (a_len > b_len) {
long = a
long_end = a_len
short = b
short_end = b_len
} else {
long = b
long_end = b_len
short = a
short_end = a_len
}
l = abs(a_len - b_len)
start = 1
while (substr(long, start, start) == substr(short, start, start)) {
if (start == short_end) {
return(list(substr(long, start+1, long_end), start+1))
}
start = start + 1
}
while (substr(long, long_end, long_end) ==  substr(short, short_end, short_end)) {
long_end = long_end - 1
short_end = short_end - 1
if (long_end - start < l) {
return(list(substr(long, start, long_end), start))
}
}
if (long_end - start != l+1) {
return(list("Error_Allele_Format", "Error_Allele_Format"))
} else {
return(list(substr(long, start, long_end), start))
}
}
# Version of NCBI Variant Overprecision Correction Algorithm
speedy_name <- function(dnaseq, var) {
seq_str <- as.character(dnaseq)
ref <- substr(seq_str, max_len + 1, max_len + 1 + var$ref_len - 1)
if (ref != var$ref) {
return(rep("Error_Ref_Mismatch", 2))
}
if (var$ref_len == 1 & var$alt_len ==  1) {
speedy <- paste(var$chr, var$hg38_pos, var$ref, var$alt, sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos - 1, var$ref, var$alt, sep = ":")
return(c(speedy, spdi))
}
if (var$ref_len == var$alt_len & var$ref_len > 1) {
end <- nchar(var$ref)
if (substr(var$ref, 1, 1) == substr(var$alt, 1, 1) |
substr(var$ref, end, end) == substr(var$alt, end, end)) {
return(rep("Error_Allele_Format", 2))
} else {
speedy <- paste(var$chr, var$hg38_pos, var$ref, var$alt, sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos - 1, var$ref, var$alt, sep = ":")
return(c(speedy, spdi))
}
}
l <- abs(var$indel_len)
#indel <- max(var$ref, var$alt)
#indel <- substr(indel, 2, l+1)
if (var$ref_len > var$alt_len) {
insert <- get_indel(var$ref, var$alt)
indel <- insert[[1]]
start <- insert[[2]]
#indel <- substr(var$ref, 2, var$ref_len)
k <- 1
d <- max_len + start + l
while (substr(indel, k, k) == substr(dnaseq, d, d)) {
d <- d + 1
k <- k + 1
if (k == l+1) { k <- 1 }
}
k <- l
u <- max_len + start
while (substr(indel, k, k) == substr(dnaseq, u-1, u-1)) {
u <- u - 1
k <- k - 1
if (k == 0) { k <- l }
}
speedy <- paste(var$chr, var$hg38_pos+u-(max_len + 1),
substr(dnaseq, u, d-1), substr(dnaseq, u, d-1-l),
sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos+u-(max_len + 1) - 1,
substr(dnaseq, u, d-1), substr(dnaseq, u, d-1-l),
sep = ":")
return(c(speedy, spdi))
}
if (var$ref_len < var$alt_len) {
insert <- get_indel(var$ref, var$alt)
indel <- insert[[1]]
start <- insert[[2]]
#indel <- substr(var$alt, 2, var$alt_len)
subseq(dnaseq, start = max_len + 1, width = var$ref_len) <- var$alt
k <- 1
d <- max_len + start + l
while (substr(indel, k, k) == substr(dnaseq, d, d)) {
d <- d + 1
k <- k + 1
if (k == l+1) { k <- 1 }
}
k <- l
u <- max_len + start
while (substr(indel, k, k) == substr(dnaseq, u-1, u-1)) {
u <- u - 1
k <- k - 1
if (k == 0) { k <- l }
}
speedy <- paste(var$chr, var$hg38_pos+u-(max_len + 1),
substr(dnaseq, u, d-1-l), substr(dnaseq, u, d-1),
sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos+u-(max_len + 1) - 1,
substr(dnaseq, u, d-1-l), substr(dnaseq, u, d-1),
sep = ":")
return(c(speedy, spdi))
}
}
# Map between GRCh38 molecule name and RefSeq sequence name
RefSeq_start <- rep("NC_0000", 23)
RefSeq_mid <- c(paste0("0", as.character(1:9)),
as.character(10:23))
RefSeq_end <- as.character(c(11, 12, 12, 12, 10, 12, 14, 11, 12, 11,
10, 12, 11, 9, 10, 10, 11, 10, 10, 11, 9, 11, 11))
RefSeq <- paste0(RefSeq_start, RefSeq_mid, ".", RefSeq_end)
RefSeq_map <- data.frame(chr = paste0("chr", c(1:22, "X")),
NC = RefSeq)
# Loop through variants in list
# This should be improved to avoid looping
# Current rate is ~ 40k variants / min.
n <- length(X.seq)
res <- matrix(rep(NA, n*2), nrow = n)
n
for (i in 1:n) {
res[i, 1] <- c(var[i, "input_variant"])
res[i, 2] <- speedy_name(X.seq[i], var[i, ])[2]
}
head(df2)
var = df2[,1:5]
colnames(var) = c("seqnames","hg38_pos","ref","alt","input_variant")
var$chr = paste0("chr",var$seqnames)
var$ref_len <- nchar(var$ref) # Add length of ref in bp
var$alt_len <- nchar(var$alt) # Add length of alt in bp
var$indel_len <- var$ref_len - var$alt_len
# Get reference sequences around variants
X <- var %>%
mutate(start = hg38_pos - max_len, end = hg38_pos + max_len)
X.gr <- makeGRangesFromDataFrame(X,
seqnames.field = "seqnames",
start.field = "start",
end.field = "end")
X.seq <- getSeq(Hsapiens, X.gr)
# Function to identify insertion sequence
# in atypical ref/alt vcf format cases
get_indel = function(a, b) {
a_len = nchar(a)
b_len = nchar(b)
if (a_len > b_len) {
long = a
long_end = a_len
short = b
short_end = b_len
} else {
long = b
long_end = b_len
short = a
short_end = a_len
}
l = abs(a_len - b_len)
start = 1
while (substr(long, start, start) == substr(short, start, start)) {
if (start == short_end) {
return(list(substr(long, start+1, long_end), start+1))
}
start = start + 1
}
while (substr(long, long_end, long_end) ==  substr(short, short_end, short_end)) {
long_end = long_end - 1
short_end = short_end - 1
if (long_end - start < l) {
return(list(substr(long, start, long_end), start))
}
}
if (long_end - start != l+1) {
return(list("Error_Allele_Format", "Error_Allele_Format"))
} else {
return(list(substr(long, start, long_end), start))
}
}
# Version of NCBI Variant Overprecision Correction Algorithm
speedy_name <- function(dnaseq, var) {
seq_str <- as.character(dnaseq)
ref <- substr(seq_str, max_len + 1, max_len + 1 + var$ref_len - 1)
if (ref != var$ref) {
return(rep("Error_Ref_Mismatch", 2))
}
if (var$ref_len == 1 & var$alt_len ==  1) {
speedy <- paste(var$chr, var$hg38_pos, var$ref, var$alt, sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos - 1, var$ref, var$alt, sep = ":")
return(c(speedy, spdi))
}
if (var$ref_len == var$alt_len & var$ref_len > 1) {
end <- nchar(var$ref)
if (substr(var$ref, 1, 1) == substr(var$alt, 1, 1) |
substr(var$ref, end, end) == substr(var$alt, end, end)) {
return(rep("Error_Allele_Format", 2))
} else {
speedy <- paste(var$chr, var$hg38_pos, var$ref, var$alt, sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos - 1, var$ref, var$alt, sep = ":")
return(c(speedy, spdi))
}
}
l <- abs(var$indel_len)
#indel <- max(var$ref, var$alt)
#indel <- substr(indel, 2, l+1)
if (var$ref_len > var$alt_len) {
insert <- get_indel(var$ref, var$alt)
indel <- insert[[1]]
start <- insert[[2]]
#indel <- substr(var$ref, 2, var$ref_len)
k <- 1
d <- max_len + start + l
while (substr(indel, k, k) == substr(dnaseq, d, d)) {
d <- d + 1
k <- k + 1
if (k == l+1) { k <- 1 }
}
k <- l
u <- max_len + start
while (substr(indel, k, k) == substr(dnaseq, u-1, u-1)) {
u <- u - 1
k <- k - 1
if (k == 0) { k <- l }
}
speedy <- paste(var$chr, var$hg38_pos+u-(max_len + 1),
substr(dnaseq, u, d-1), substr(dnaseq, u, d-1-l),
sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos+u-(max_len + 1) - 1,
substr(dnaseq, u, d-1), substr(dnaseq, u, d-1-l),
sep = ":")
return(c(speedy, spdi))
}
if (var$ref_len < var$alt_len) {
insert <- get_indel(var$ref, var$alt)
indel <- insert[[1]]
start <- insert[[2]]
#indel <- substr(var$alt, 2, var$alt_len)
subseq(dnaseq, start = max_len + 1, width = var$ref_len) <- var$alt
k <- 1
d <- max_len + start + l
while (substr(indel, k, k) == substr(dnaseq, d, d)) {
d <- d + 1
k <- k + 1
if (k == l+1) { k <- 1 }
}
k <- l
u <- max_len + start
while (substr(indel, k, k) == substr(dnaseq, u-1, u-1)) {
u <- u - 1
k <- k - 1
if (k == 0) { k <- l }
}
speedy <- paste(var$chr, var$hg38_pos+u-(max_len + 1),
substr(dnaseq, u, d-1-l), substr(dnaseq, u, d-1),
sep = ":")
spdi <- paste(RefSeq_map[RefSeq_map$chr == var$chr, 2],
var$hg38_pos+u-(max_len + 1) - 1,
substr(dnaseq, u, d-1-l), substr(dnaseq, u, d-1),
sep = ":")
return(c(speedy, spdi))
}
}
# Map between GRCh38 molecule name and RefSeq sequence name
RefSeq_start <- rep("NC_0000", 23)
RefSeq_mid <- c(paste0("0", as.character(1:9)),
as.character(10:23))
RefSeq_end <- as.character(c(11, 12, 12, 12, 10, 12, 14, 11, 12, 11,
10, 12, 11, 9, 10, 10, 11, 10, 10, 11, 9, 11, 11))
RefSeq <- paste0(RefSeq_start, RefSeq_mid, ".", RefSeq_end)
RefSeq_map <- data.frame(chr = paste0("chr", c(1:22, "X")),
NC = RefSeq)
# Loop through variants in list
# This should be improved to avoid looping
# Current rate is ~ 40k variants / min.
n <- length(X.seq)
res <- matrix(rep(NA, n*2), nrow = n)
n
for (i in 1:n) {
print(i)
res[i, 1] <- c(var[i, "input_variant"])
res[i, 2] <- speedy_name(X.seq[i], var[i, ])[2]
}
res
head(res)
head(df2)
head(res)
outfile="~/Downloads/post_var_to_spdi.txt"
write.table(res, file = outfile, row.names = F, col.names = F, quote = F, sep = "\t")
dim(res)
df2.out = fread(outfile,data.table = F,stringsAsFactors = F)
head(df2.out)
head(df2)
df2.out = fread(outfile,data.table = F,stringsAsFactors = F,header=F)
merge(df2,df2.out,by.x="SPDI",by.y="V2")[1:3,]
head(df2.out)
merge(df2,df2.out,by.x="SPDI",by.y="V1")[1:3,]
head(df2)
head(df2.out)
merge(df2,df2.out,by.x="SPDI",by.y="V1")[1:3,]
merge(df2,df2.out,by.x="SPDI",by.y="V1")[1:3,] %>%
select(-SPDI) %>% rename(SPDI=V2)
df2.final = merge(df2,df2.out,by.x="SPDI",by.y="V1")[1:3,] %>%
select(-SPDI) %>% rename(SPDI=V2)
df2.final = merge(df2,df2.out,by.x="SPDI",by.y="V1") %>%
select(-SPDI) %>% rename(SPDI=V2)
dim(df2.final)
library(BSgenome.Hsapiens.UCSC.hg38)
library(plyranges)
f.out = "~/Downloads/Lupus_gwas.txt"
# df = fread("~/Downloads/Lupus_clinvar.txt",data.table = F,stringsAsFactors = F,header = T)
df = fread("~/Downloads/Lupus_gwas.txt",data.table = F,stringsAsFactors = F,header = T)
# chrNum=1
# tmp = subset(df,chr==chrNum)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
tmp2 = data.frame(chr=df$chr,pos=df$pos,ReferenceAllele=refallele)
############
flip_strand <- function(allele) {
dplyr::case_when(
allele == "A" ~ "T",
allele == "C" ~ "G",
allele == "T" ~ "A",
allele == "G" ~ "C",
TRUE ~ NA_character_
)
}
ss = df
# ss2 is original sumstats
ss2 <- df
# ss3 is reversed sumstats
ss3 <- df
ss3$ReferenceAllele <- ss$AlternativeAllele
ss3$AlternativeAllele <- ss$ReferenceAllele
#ss3 becomes original + reversed sumstats
ss3 <- rbind(ss2, ss3) #####
rm(ss2)
# for non-ambiguous snps, do strand flip:
ss4 <- ss3[!((ss3$AlternativeAllele == "A" & ss3$ReferenceAllele == "T") |
(ss3$AlternativeAllele == "T" & ss3$ReferenceAllele == "A") |
(ss3$AlternativeAllele == "G" & ss3$ReferenceAllele == "C") |
(ss3$AlternativeAllele == "C" & ss3$ReferenceAllele == "G")),]
ss4$AlternativeAllele <- flip_strand(ss4$AlternativeAllele)
ss4$ReferenceAllele <- flip_strand(ss4$ReferenceAllele)
#ss4 becomes original + reversed + strand flip original + strand flip reverse sumstats
ss4 <- rbind(ss3, ss4) ######
##############
df2 = merge(ss4,tmp2,by=c('chr',"pos","ReferenceAllele"))
df2 = df2[!duplicated(df2),]
var = df2
head(var)
dim(df2.final)
fwrite(df2.final,"~/Downloads/Marderstein_Lupus_ClinVar.txt",quote = F,na = "NA",sep = '\t',row.names = F,col.names = T)
suppressPackageStartupMessages(library(GenomicRanges))
suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
suppressPackageStartupMessages(library(dplyr))
max_len = 250 # maximum distance to search genome in overprecision algorithm
# Read in list of variants
var <- read.table(infile, stringsAsFactors=F, header = F)
infile
head(df2)
var = df2[,1:5]
colnames(var) = c("seqnames","hg38_pos","ref","alt","input_variant")
var$chr = paste0("chr",var$seqnames)
var$ref_len <- nchar(var$ref) # Add length of ref in bp
var$alt_len <- nchar(var$alt) # Add length of alt in bp
var$indel_len <- var$ref_len - var$alt_len
dim(df2)
dim(ss4)
dim(df2)
dim(tmp2)
# chrNum=1
# tmp = subset(df,chr==chrNum)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
tmp2 = data.frame(chr=df$chr,pos=df$pos,ReferenceAllele=refallele)
table(df$chr)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges()
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges() |>
getSeq(x=Hsapiens)
# df = fread("~/Downloads/Lupus_clinvar.txt",data.table = F,stringsAsFactors = F,header = T)
df = fread("~/Downloads/Lupus_gwas.txt",data.table = F,stringsAsFactors = F,header = T)
# chrNum=1
df = subset(df,chr!=7)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
head(df)
head(data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1))
head(data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges() |>
getSeq(x=Hsapiens))
head(data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
as_granges())
sum(is.na(df$pos))
# df = fread("~/Downloads/Lupus_clinvar.txt",data.table = F,stringsAsFactors = F,header = T)
df = fread("~/Downloads/Lupus_gwas.txt",data.table = F,stringsAsFactors = F,header = T)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(df,1000) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(1000) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(100) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
head(df)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(1) |>
as_granges()
refallele
df = fread("~/Downloads/Lupus_clinvar.txt",data.table = F,stringsAsFactors = F,header = T)
# chrNum=1
# df = subset(df,chr!=7)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
library(BSgenome.Hsapiens.UCSC.hg38)
library(plyranges)
f.out = "~/Downloads/Lupus_gwas.txt"
df = fread("~/Downloads/Lupus_clinvar.txt",data.table = F,stringsAsFactors = F,header = T)
# chrNum=1
# df = subset(df,chr!=7)
refallele = data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |>
# refallele = data.frame(seqnames=paste0("chr",chrNum),start=tmp$pos,width=1) |>
head(1) |>
as_granges() |>
getSeq(x=Hsapiens) %>% as.character()
head(df)
data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |> head
data.frame(seqnames=paste0("chr",df$chr),start=df$pos,width=1) |> head()
data.frame(seqnames="chr1",start=c(112301040,112301258),width=1) |>
as_granges() |>
getSeq(x=Hsapiens)
